package io.hainenber.vulpes;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.hainenber.vulpes.entity.Vulnerability;
import org.eclipse.jgit.diff.DiffEntry;
import org.opensearch.client.opensearch.OpenSearchClient;
import org.opensearch.client.opensearch.core.IndexRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

@Component
public class VulnerabilityUpdater {
    private static final Logger log = LoggerFactory.getLogger(VulnerabilityUpdater.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();
    private final OpensearchClientFactory opensearchClientFactory;

    @Value("${vulpes.github.advisory-database.path}")
    private String advisoryDatabasePath;

    @Value("${vulpes.opensearch.index")
    private String indexName;

    public VulnerabilityUpdater(OpensearchClientFactory opensearchClientFactory) {
        this.opensearchClientFactory = opensearchClientFactory;
    }

    public void updateFromGitDiffs(List<DiffEntry> diffEntries) throws Exception {
        final OpenSearchClient openSearchClient = opensearchClientFactory.getOpensearchClient();

        // TODO: Batch indexing changed vulnerability data as batchif there are more than 1000 records
        for (DiffEntry diffEntry : diffEntries) {
            final String changedVulnerabilityPathString = diffEntry.getNewPath();
            final Path vulnerabilityPath = Path.of(advisoryDatabasePath, changedVulnerabilityPathString);
            try {
                final String vulnerabilityString = Files.readString(vulnerabilityPath);
                final Vulnerability changedVulnerability = objectMapper.readValue(vulnerabilityString, Vulnerability.class);
                final IndexRequest<Vulnerability> indexRequest = new IndexRequest.Builder<Vulnerability>()
                        .index(indexName)
                        .id(changedVulnerability.getId())
                        .document(changedVulnerability)
                        .build();
                openSearchClient.index(indexRequest);
                log.info("Successfully index updated data for vulnerability {}", changedVulnerability.getId());
            } catch (IOException e) {
                log.error("Failed to read vulnerability data from file {}: {}", vulnerabilityPath, e.toString());
            }
        }
    }
}
