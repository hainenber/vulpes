package io.hainenber.vulpes;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.PullCommand;
import org.eclipse.jgit.api.PullResult;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.lib.StoredConfig;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.List;
import java.util.Objects;

@Component
public class VulnerabilityFetcher {
    private static final Logger log = LoggerFactory.getLogger(VulnerabilityFetcher.class);
    private final VulnerabilityUpdater vulnerabilityUpdater;

    @Value("${vulpes.github.advisory-database.path}")
    private String advisoryDatabasePath;

    public VulnerabilityFetcher(VulnerabilityUpdater vulnerabilityUpdater) {
        this.vulnerabilityUpdater = vulnerabilityUpdater;
    }

    @Scheduled(fixedRateString = "1h")
    public void fetchGithubAdvisoryDatabase() throws Exception {
        // Ensure advisory-database directory exists and non-empty
        var advisoryDatabasePathDir = new File(advisoryDatabasePath);
        if (!advisoryDatabasePathDir.exists()) {
            throw new Exception("Advisory database path does not exist");
        }
        if (!advisoryDatabasePathDir.isDirectory()) {
            throw new Exception("Advisory database path is not a directory");
        }
        if (advisoryDatabasePathDir.length() == 0) {
            throw new Exception("Advisory database path is a directory but it is empty");
        }
        if (Objects.requireNonNull(advisoryDatabasePathDir.list(((dir, name) -> name.endsWith(".git")))).length == 0) {
            throw new Exception("Advisory database directory path is not a Git repo");
        }

        // Run "git pull origin main" command
        try (Git advisoryDatabaseGitRepo = Git.open(advisoryDatabasePathDir)) {
            Repository advisoryDatabaseGitRepoObject = advisoryDatabaseGitRepo.getRepository();

            // Get current HEAD's Git reference before pulling.
            ObjectId oldHead = advisoryDatabaseGitRepoObject.resolve("HEAD^{tree}");

            // Set jGit request buffer to a higher number since we're dealing with a huge repo.
            StoredConfig storedConfig = advisoryDatabaseGitRepo.getRepository().getConfig();
            storedConfig.setInt("http", null, "postBuffer", 10 * 1024 * 1024); // 10 MB
            storedConfig.save();

            PullCommand pullCommand = advisoryDatabaseGitRepo.pull()
                    .setRemote("origin")
                    .setRemoteBranchName("main");
            PullResult pullResult = pullCommand.call();
            if (pullResult.isSuccessful()) {
                log.info("Advisory database successfully updated with Git pull");
            } else {
                log.error("Advisory database failed to update with Git pull");
            }

            if (pullResult.isSuccessful()) {
                // Get current HEAD's Git reference after pulling.
                ObjectId currentHead = advisoryDatabaseGitRepoObject.resolve("HEAD^{tree}");

                // Get list of changed files after pulling.
                ObjectReader reader = advisoryDatabaseGitRepoObject.newObjectReader();
                CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
                oldTreeIter.reset(reader, oldHead);
                CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
                newTreeIter.reset(reader, currentHead);

                List<DiffEntry> diffs = advisoryDatabaseGitRepo.diff()
                        .setNewTree(newTreeIter)
                        .setOldTree(oldTreeIter)
                        .call();
                if (!diffs.isEmpty()) {
                    vulnerabilityUpdater.updateFromGitDiffs(diffs);
                }
            }
        }
    }
}
